# Fancy 색인 ; 결과는 항상 1차원                               Fancy 색인 ; 결과는 항상 1차원

# 8x4 배열
arr = np.empty((8, 4))        # 8x4 array
for i in range(8):
    arr[i] = i
arr
# <출력>
# array([[0., 0., 0., 0.],
#        [1., 1., 1., 1.],
#        [2., 2., 2., 2.],
#        [3., 3., 3., 3.],
#        [4., 4., 4., 4.],
#        [5., 5., 5., 5.],
#        [6., 6., 6., 6.],
#        [7., 7., 7., 7.]])


# 특정순서로 row 선택 시 해당 정수가 담긴 ndarray 나 리스트를 넘김
arr[[4, 3, 0, 6]]

# <출력>
# array([[4., 4., 4., 4.],
#        [3., 3., 3., 3.],
#        [0., 0., 0., 0.],
#        [6., 6., 6., 6.]])

# 색인 음수 => 끝에서부터 로우 선택
arr[[-3, -5, -7]]

# <출력>
# array([[5., 5., 5., 5.],
#        [3., 3., 3., 3.],
#        [1., 1., 1., 1.]])


import numpy as np
# reshape ;
# 다차원 색인 배열 ; 각 색인 튜플에 대응하는 1차원 배열 선택
arr = np.arange(32).reshape((8,4))
arr
# <출력>
# array([[ 0,  1,  2,  3],
#        [ 4,  5,  6,  7],
#        [ 8,  9, 10, 11],
#        [12, 13, 14, 15],
#        [16, 17, 18, 19],
#        [20, 21, 22, 23],
#        [24, 25, 26, 27],
#        [28, 29, 30, 31]])

arr[[1,5,7,2],[0,3,1,2]]
# <출력> array([ 4, 23, 29, 10])


# ** 결과가 사각형 모양의 값이 되기위해서는
arr[[1,5,7,2]][:,[0,3,1,2]]
# <출력>
# array([[ 4,  7,  5,  6],
#        [20, 23, 21, 22],
#        [28, 31, 29, 30],
#        [ 8, 11,  9, 10]])





# .T : 행 렬 바꾸기 transpose                                .T : 행 렬 바꾸기 transpose

arr = np.arange(15).reshape((3, 5))

arr
# 3x5 array
# <출력>
# array([[ 0,  1,  2,  3,  4],
#        [ 5,  6,  7,  8,  9],
#        [10, 11, 12, 13, 14]])


# 행 렬 바꾸기  # 5x3 array

arr.T
# <출력>
# array([[ 0,  5, 10],
#        [ 1,  6, 11],
#        [ 2,  7, 12],
#        [ 3,  8, 13],
#        [ 4,  9, 14]])


# 내적 np.dot ; 각 원소를            ##################
arr = np.random.randn(6,3)
arr
np.dot(arr.T,arr)


# 다차원 배열 => transpose 메서드는 튜플로 축 번호를 받아서 치환
arr = np.arange(16).reshape((2, 2, 4))

arr
# <출력>
# array([[[ 0,  1,  2,  3],
#         [ 4,  5,  6,  7]],
#        [[ 8,  9, 10, 11],
#         [12, 13, 14, 15]]])

arr.transpose((1, 0, 2))
# <출력>
# array([[[ 0,  1,  2,  3],
#         [ 8,  9, 10, 11]],
#        [[ 4,  5,  6,  7],
#         [12, 13, 14, 15]]])
# reshape 된 arrary 의 index 배열. (1,0,2) --> (2, 2, 4)



#
a = np.ones((2,3,4))

a
# <출력>
# array([[[1., 1., 1., 1.],
#         [1., 1., 1., 1.],
#         [1., 1., 1., 1.]],
#        [[1., 1., 1., 1.],
#         [1., 1., 1., 1.],
#         [1., 1., 1., 1.]]])



np.transpose(a, (1,0,2))
# <출력>
# array([[[1., 1., 1., 1.],
#         [1., 1., 1., 1.]],
#        [[1., 1., 1., 1.],
#         [1., 1., 1., 1.]],
#        [[1., 1., 1., 1.],
#         [1., 1., 1., 1.]]])

np.transpose(a, (1,0,2)).shape
# <출력> (3, 2, 4)

# reshape 된 arrary 의 index 배열. (2, 1, 0) --> (4, 3, 2)


a = np.ones((2,3,4))

a
# <출력>
# array([[[1., 1., 1., 1.],
#         [1., 1., 1., 1.],
#         [1., 1., 1., 1.]],
#        [[1., 1., 1., 1.],
#         [1., 1., 1., 1.],
#         [1., 1., 1., 1.]]])



np.transpose(a,(2,1,0))
# <출력>
# array([[[1., 1.],
#         [1., 1.],
#         [1., 1.]],
#        [[1., 1.],
#         [1., 1.],
#         [1., 1.]],
#        [[1., 1.],
#         [1., 1.],
#         [1., 1.]],
#        [[1., 1.],
#         [1., 1.],
#         [1., 1.]]])

np.transpose(a,(2,1,0)).shape
# <출력> (4, 3, 2)


arr = np.arange(16).reshape((2, 2, 4))

arr
# <출력>
# array([[[ 0,  1,  2,  3],
#         [ 4,  5,  6,  7]],
#        [[ 8,  9, 10, 11],
#         [12, 13, 14, 15]]])

arr.swapaxes(1, 2)
# <출력>
# array([[[ 0,  4],
#         [ 1,  5],
#         [ 2,  6],
#         [ 3,  7]],
#        [[ 8, 12],
#         [ 9, 13],
#         [10, 14],
#         [11, 15]]])




import numpy as geek

arr = geek.array([[[0, 1], [2, 3]], [[4, 5], [6, 7]]])
gfg = geek.swapaxes(arr, 0, 2)
print(gfg)
# <출력>
# [[[0 4]
#   [2 6]]
#  [[1 5]
#   [3 7]]]




